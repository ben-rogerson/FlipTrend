/**
 * Generates a map of colors for a radar chart.
 * The colors are generated by interpolating between two colors.
 * The first value begins at 0 and the last value ends at the supplied numColors.
 * @param highColor - The hsl color of the radar chart when the value is highest.
 * @param lowColor - The hsl color of the radar chart when the value is lowest.
 * @param numColors - The number of colors to generate.
 * @returns A map of colors for the radar chart.
 * @example
 * const highColor = \{ h: 70, s: 76, l: 61 \};
 * const lowColor = \{ h: 11, s: 76, l: 61 \};
 * const numColors = 35;
 * const radarColors = generateRadarColors(highColor, lowColor, numColors);
 */
const generateRadarColors = (
  highColor: { h: number; s: number; l: number },
  lowColor: { h: number; s: number; l: number },
  numColors: number
): Map<number, { backgroundColor: string; borderColor: string }> => {
  if (numColors < 2) throw new Error('numColors must be greater than 1')

  const radarColors = new Map<
    number,
    { backgroundColor: string; borderColor: string }
  >()
  const hueStep = (highColor.h - lowColor.h) / (numColors - 1)
  const saturationStep = (highColor.s - lowColor.s) / (numColors - 1)
  const lightnessStep = (highColor.l - lowColor.l) / (numColors - 1)

  for (let i = 0; i <= numColors; i++) {
    const hue = Math.round(lowColor.h + i * hueStep)
    const saturation = lowColor.s + i * saturationStep
    const lightness = lowColor.l + i * lightnessStep

    radarColors.set(i, {
      backgroundColor: `hsl(${hue}deg ${saturation}% ${lightness}% / 50%)`,
      borderColor: `hsl(${hue}deg ${saturation}% ${lightness}%)`,
    })
  }

  return radarColors
}

const highColor = { h: 70, s: 76, l: 61 } // #CEE751
const lowColor = { h: 0, s: 76, l: 61 } // #E75151
const numColors = 35
const defaultRadarColors = generateRadarColors(highColor, lowColor, numColors)

/**
 * Creates a path for a svg circle.
 * @param cx - The x-coordinate of the center of the circle.
 * @param cy - The y-coordinate of the center of the circle.
 * @param r - The radius of the circle.
 * @param deg - The degree placed on the circle.
 * @param type - If positioned on the inside/outside of the circle.
 * @example createCirclePath(100, 100, 50, 90, 'inner');
 */
const createCirclePath = (
  cx: number,
  cy: number,
  r: number,
  deg: number,
  type: 'inner' | 'outer' = 'outer'
) => {
  const theta = (deg * Math.PI) / 180
  const dx = r * Math.cos(theta)
  const dy = -r * Math.sin(theta)
  const direction = type === 'outer' ? 1 : 0

  return `M ${cx} ${cy} m ${dx},${dy} a ${r},${r} 0 1,${direction} ${-2 * dx},${
    -2 * dy
  } a ${r},${r} 0 1,${direction} ${2 * dx},${2 * dy}`
}

// const COLOR_GRID = '#2F3641'
const COLOR_GRID = getComputedStyle(document.documentElement).getPropertyValue(
  '--color-cyprus-light'
)

export { createCirclePath, generateRadarColors, defaultRadarColors, COLOR_GRID }
